generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model catatanbelajar {
  id                 Int                  @id(map: "catatanbelajar_pk") @default(autoincrement())
  id_akun            Int
  judul_catatan      String
  isi_catatan        String
  privasi            privasi_t
  gambar             String?
  catatanbelajar_tag catatanbelajar_tag[]
}

model tes {
  id          BigInt @id(map: "test_pkey") @default(autoincrement())
  test_text   String @default("")
  test_number BigInt
}

model tag {
  id                 Int                  @id @default(autoincrement())
  nama_tag           String?              @unique
  catatanbelajar_tag catatanbelajar_tag[]
  thread_tag         thread_tag[]
  quiz               quiz[]               @relation("quizTotag")
}

model catatanbelajar_tag {
  id                Int            @id @default(autoincrement())
  id_catatanbelajar Int
  id_tag            Int
  catatanbelajar    catatanbelajar @relation(fields: [id_catatanbelajar], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag               tag            @relation(fields: [id_tag], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([id_catatanbelajar, id_tag], map: "unique_tag_per_catatan")
}

model comment {
  id                  Int                   @id @default(autoincrement())
  thread_id           Int?
  user_id             String
  author              String
  content             String
  anonymous           Boolean               @default(false)
  verified            Boolean               @default(false)
  upvote              Int                   @default(0)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  thread              thread?               @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment_reply       comment_reply[]
  report              report[]
  user_upvote_comment user_upvote_comment[]
}

model comment_reply {
  id         Int      @id @default(autoincrement())
  comment_id Int?
  user_id    String
  author     String
  content    String
  anonymous  Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  comment    comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  report     report[]
}

model quiz {
  id         Int      @id @default(autoincrement())
  title      String
  createdAt  DateTime @default(now())
  image      String?
  jumlahSoal Int
  link       String
  userId     Int
  tag        tag[]    @relation("quizTotag")
}

model report {
  id               Int            @id @default(autoincrement())
  user_id          String
  thread_id        Int?
  comment_id       Int?
  comment_reply_id Int?
  report_type      String
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  status_review    Boolean        @default(false)
  comment          comment?       @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment_reply    comment_reply? @relation(fields: [comment_reply_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  thread           thread?        @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model thread {
  id            Int          @id @default(autoincrement())
  user_id       String
  author        String
  title         String
  content       String
  anonymous     Boolean      @default(false)
  comment_count Int          @default(0)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  comment       comment[]
  report        report[]
  thread_tag    thread_tag[]
}

model thread_tag {
  thread_id Int
  tag_id    Int
  tag       tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  thread    thread @relation(fields: [thread_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([thread_id, tag_id])
}

model user_upvote_comment {
  user_id    String
  comment_id Int
  comment    comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, comment_id])
}

enum privasi_t {
  PRIVATE
  PUBLIC
}
